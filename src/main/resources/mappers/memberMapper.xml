<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.example.BlogMapper">
<!-- 반복sql문 될거같아서 만들어둠 삽입해서씀 -->
<sql id="returnmember">
 select id,name,to_char(birthdate,'YY/MM/DD') as birthdate,password,gender,phone_num,email,confirmation,articlecategory,
'student' as classification
from student where id = #{userid}
union  
select id,name,to_char(birthdate,'YY/MM/DD') as birthdate,password,gender,phone_num,email,confirmation,articlecategory,
'manager' as classification
from manager where id = #{userid}
union
select id,name,to_char(birthdate,'YY/MM/DD') as birthdate,password,gender,phone_num,email,confirmation,articlecategory,
'teacher' as classification
from teacher where id = #{userid}

</sql>
	
	<select id="login" resultType="memberDTO">
 	<include refid="returnmember"></include>
	</select>
<!-- 자동로그인을 위한 세션아이디 저장 -->
<update id="updatesessionid" parameterType="hashmap">
update 
<if test="type == 'student'">
student
</if>
<if test="type == 'manager'">
manager
</if>
<if test="type == 'teacher'">
teacher
</if>
set sessionid = #{sessionid} where id = #{memberid}
</update>
<!-- 자동로그인을 위한 세션아이디 체크메서드 -->
<select id="beforelogincheck" resultType="memberDTO">

	select id,name,birthdate,password,gender,phone_num,email,confirmation,articlecategory,
'student' as classification
from student where sessionid = #{sessionid}
union  
select id,name,birthdate,password,gender,phone_num,email,confirmation,articlecategory,
'manager' as classification
from manager where sessionid = #{sessionid}
union
select id,name,birthdate,password,gender,phone_num,email,confirmation,articlecategory,
'teacher' as classification
from teacher where sessionid = #{sessionid}

</select>
<!-- 자기자신 출석 체크 리스트 -->
<select id="myattendancelist" resultType="attendanceDTO">

	select * from attendance where 
	student_id = #{memberid} and 
	to_char(course_date,'mm')= to_char(sysdate,'mm') 
	order by course_date desc 

</select>

<!-- 학생들 출석 리스트 -->
<select id="studentattendancelist" resultType="attendanceDTO">

select student_id,course_id,tag_time,to_char(course_date,'YY-MM-DD') as course_date,name as student_name from attendance,student 
where student.id = attendance.student_id and course_date = to_date(sysdate,'YY/MM/DD')
order by course_date desc

</select>

<!-- 오늘 출석 하지않은 학생 목록 -->

<select id="todayabsence" resultType="memberDTO">

select * from student
 where id not in 
 (select student_id from attendance where COURSE_DATE = to_char(sysdate,'YY-MM-DD'))

</select>

<select id="getattendancedate" resultType="attendanceDTO">

select to_char(course_date,'YYYY-MM-DD') as course_date from attendance where to_char(course_date,'MM') = to_char(sysdate,'MM')  
and student_id = #{student_id}
group by course_date 
having (to_date(max(tag_time),'HH24:MI:SS')-to_date(min(tag_time),'HH24:MI:SS'))*24>=6


</select>

<select id="getattendancelate" resultType="int">
select count(count(to_char(course_date,'YYYY-MM-DD'))) from attendance where to_char(course_date,'MM') = to_char(sysdate,'MM')  
and student_id = #{student_id}
group by course_date 
having (to_date(max(tag_time),'HH24:MI:SS')-to_date(min(tag_time),'HH24:MI:SS'))*24>=6
</select>

<select id="memberlist" parameterType="hashmap" resultType="memberDTO">
select * from
<if test="mem == 'student'">
student
</if>
<if test="mem == 'teacher'">
teacher
</if> 
<if test="mem == 'watinglist'">
student
where confirmation = 0
</if>

</select>


<!-- 출석체크 query -->
<insert id="doattend" parameterType="String">
	insert into attendance values(attendance_seq.nextval,#{memberid},
	(select course_id from register where student_id =#{memberid}),
	to_char(sysdate,'HH24:Mi:SS'),to_date(sysdate,'yy/mm/dd'))
</insert>	
<!-- 내 정보 수정 -->
<update id="updatemyinfo" >
	
	update student set password=#{password},
	phone_num=#{phone_num},email=#{email} where id = #{id}
	
</update>

<update id="updateconfirmation">
	update student set confirmation = 1 where id = #{id}
</update>


	
</mapper>